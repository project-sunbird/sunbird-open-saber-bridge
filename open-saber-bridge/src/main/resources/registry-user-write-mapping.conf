# Configuration to transform json data from sunbird format to registry format
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# fromFieldName = field from where data to be transformed will be fetched. 
# if not configured, key field(e.g. teacher.firstName) would be taken as fromFieldName
# toFieldName	= field where transformed value will be set (e.g. teacher.teachingExperience)
# (e.g. a.b.c - here transformed value will be set in field c which is held by map b, which in-turn is held by map a)
# fromType		= data-type of fromFieldName
# toType		= data-type of toFieldName
# supported data-types are Integer, Double, Long, Boolean, String, DateString(Technically String, with date values) and list of these types
# for DateString fields, fromDateFormat and toDateFormat has to be configured
# enums are configured in sunbird-registry-enums-mapping.conf file. Those enum names can be mentioned here in enum field configuration
# List of custom types - List<T> - is supported subject to following configurations
# if the fromType and toType are of List<T> type, then the custom type T has to be configured in this file. 
# (refer e.g. List<class_subject_taught>) - here transformation happens according to configuration in class_subject_taught
# if the fromType is List<T> and toType is non-list type, filters are supported to filter the value from complex input format. 
# In this case, T will be of type Map. 
# The map will be retrieved from the list based on filter configuration and filterField from the map will be set in toFieldName
# The scenario where toType is List<T> and fromType is not, is not supported
# 
# Examples
# ~~~~~~~~
# teacher {
#	firstName {
#		toFieldName	= "teacher.firstName"
#		fromType	= "String"
#		toType		= "String"
#	}
#	classSubjectTaught {
#		toFieldName	= "teacher.teachingExperience"
#		fromType	= "List<class_subject_taught>"
#		toType		= "List<T>"
#	}
# 	externalIds {
#		toFieldName = "teacher.teacherId"
#		fromType	= "List<T>"
#		toType		= "String"
#		filters		= [{field = "provider", values = ["shaalakosh"]}, {field = "operation", values	= ["add","edit"]}]
#		filterField = "id"
#	}
# }
# class_subject_taught {
#	classes {
#		toFieldName	= "classesTaught"
#		fromType	= "String"
#		toType		= "String"
#		enum		= "classEnum"
#	}
#	subjects {
#		toFieldName	= "subjectsTaught"
#		fromType	= "List<String>"
#		toType		= "List<String>"
#		enum		= "subjectsEnum"
#	}
# }
#
teacher {
	registryId {
		toFieldName	= "teacher.id"
		fromType	= "String"
		toType		= "String"
	}
	firstName {
		toFieldName	= "teacher.firstName"
		fromType	= "String"
		toType		= "String"
	}
	lastName {
		toFieldName	= "teacher.lastName"
		fromType	= "String"
		toType		= "String"
	}
	fullName {
		toFieldName	= "teacher.fullName"
		fromType	= "String"
		toType		= "String"
	}
	gender {
		toFieldName	= "teacher.gender"
		fromType	= "String"
		toType		= "String"
		enum		= "genderEnum"		
	}
	dob {
		toFieldName	= "teacher.birthDate"
		fromType	= "DateString",
		toType		= "DateString"
		fromDateFormat= "yyyy-MM-dd"
		toDateFormat= "yyyy-MM-dd"
	}
	email {
		toFieldName	= "teacher.email"
		fromType	= "String"
		toType		= "String"
	}
	phone {
		toFieldName	= "teacher.telephone"
		fromType	= "String"
		toType		= "String"
	}
	externalIds {
		toFieldName = "teacher.teacherId"
		fromType	= "List<T>"
		toType		= "String"
		filters		= [{field = "provider", values = ["shaalakosh"]}]
		filterField = "id"
	}
	employmentState {
		toFieldName	= "teacher.employmentState"
		fromType	= "String"
		toType		= "String"
		enum		= "stateEnum"
	}
	teacherType {
		toFieldName	= "teacher.teacherType"
		fromType	= "String"
		toType		= "String"
		enum		= "teacherTypeEnum"
	}
	appointmentType {
		toFieldName	= "teacher.appointmentType"
		fromType	= "String"
		toType		= "String"
		enum		= "appointmentTypeEnum"
	}
	serviceJoiningDate {
		toFieldName	= "teacher.serviceJoiningDate"
		fromType	= "DateString",
		toType		= "DateString"
		fromDateFormat= "yyyy-MM-dd"
		toDateFormat= "yyyy-MM-dd"
	}
	disabilityType {
		toFieldName	= "teacher.disabilityType"
		fromType	= "List<String>"
		toType		= "List<String>"
		enum		= "disabilityTypeEnum"
	}
	teacherSchoolBoardAffiliation {
		toFieldName = "teacher.teacherSchoolBoardAffiliation"
		fromType	= "String"
		toType		= "String"
		enum		= "schoolBoardEnum"
	}
	schoolCode {
		toFieldName	= "teacher.schoolCode"
		fromType	= "String"
		toType		= "String"
	}
	highestAcademicQualification {
		toFieldName	= "teacher.highestAcademicQualification"
		fromType	= "List<String>"
		toType		= "List<String>"
		enum		= "academicQualificationEnum"
	}
	highestTeacherQualification {
		toFieldName	= "teacher.highestTeacherQualification"
		fromType	= "List<String>"
		toType		= "List<String>"
		enum		= "professionalQualificationEnum"
	}
	highestMathQualification {
		toFieldName	= "teacher.highestMathQualification"
		fromType	= "String"
		toType		= "String"
		enum		= "academicQualificationEnum"
	}
	highestScienceQualification {
		toFieldName	= "teacher.highestScienceQualification"
		fromType	= "String"
		toType		= "String"
		enum		= "academicQualificationEnum"
	}
	highestEnglishQualification {
		toFieldName	= "teacher.highestEnglishQualification"
		fromType	= "String"
		toType		= "String"
		enum		= "academicQualificationEnum"
	}
	highestSSTQualification {
		toFieldName	= "teacher.highestSSTQualification"
		fromType	= "String"
		toType		= "String"
		enum		= "academicQualificationEnum"
	}
	highestVernacularLanguageQualification {
		toFieldName	= "teacher.highestVernacularLanguageQualification"
		fromType	= "String"
		toType		= "String"
		enum		= "academicQualificationEnum"
	}
	vernacularLanguageStudied {
		toFieldName	= "teacher.vernacularLanguageStudied"
		fromType	= "List<String>"
		toType		= "List<String>"
		enum		= "languageEnum"
	}
	isEnrolledInDELEDProgramme {
		toFieldName	= "teacher.isEnrolledInDELEDProgramme"
		fromType	= "Boolean"
		toType		= "Boolean"
	}
	classSubjectTaught {
		toFieldName	= "teacher.teachingExperience"
		fromType	= "List<class_subject_taught>"
		toType		= "List<T>"
	}
	schoolJoiningDate {
		toFieldName	= "teacher.schoolJoiningDate"
		fromType	= "DateString",
		toType		= "DateString"
		fromDateFormat= "yyyy-MM-dd"
		toDateFormat= "yyyy-MM-dd"
	}
	isMasterTrainer {
		toFieldName	= "teacher.isMasterTrainer"
		fromType	= "Boolean"
		toType		= "Boolean"
	}
	masterTrainerSubjects {
		toFieldName	= "teacher.masterTrainerSubjects"
		fromType	= "List<String>"
		toType		= "List<String>"
		enum		= "trainingSubjectsEnum"
	}
	trainingsCompleted {
		toFieldName	= "teacher.trainingsCompleted"
		fromType	= "List<String>"
		toType		= "List<String>"
		enum		= "trainingSubjectsEnum"
	}
	teacherInBRC {
		toFieldName	= "teacher.isTeacherInBRC"
		fromType	= "Boolean"
		toType		= "Boolean"
	}
	teacherInCRC {
		toFieldName	= "teacher.isTeacherInCRC"
		fromType	= "Boolean"
		toType		= "Boolean"
	}
	teacherStatus {
		toFieldName	= "teacher.teacherStatus"
		fromType	= "String"
		toType		= "String"
		enum		= "teacherApprovedStatusEnum"
	}
	authenticationStatus {
		toFieldName	= "teacher.authenticationStatus"
		fromType	= "String"
		toType		= "String"
		enum		= "authenticationStatusEnum"
	}
	activeStatus {
		toFieldName	= "teacher.activeStatus"
		fromType	= "String"
		toType		= "String"
		enum		= "activeStatusEnum"
	}
	lastUpdatedOn {
		toFieldName	= "teacher.lastUpdatedOn"
		fromType	= "DateString"
		toType		= "DateString"
		fromDateFormat= "yyyy-MM-dd"
		toDateFormat= "yyyy-MM-dd"
	}
}
class_subject_taught {
	classes {
		toFieldName	= "classesTaught"
		fromType	= "String"
		toType		= "String"
		enum		= "classEnum"
	}
	subjects {
		toFieldName	= "subjectsTaught"
		fromType	= "List<String>"
		toType		= "List<String>"
		enum		= "subjectsEnum"
	}
}